const Url = require('../models/Url');
const generateUniqueShortcode = require('../utils/generateShortcode');
const log = require('../middlewares/logger');

exports.createShortUrl = async (req, res) => {
  try {
    const { url, validity, shortcode } = req.body;

    if (!url || typeof url !== 'string') {
      await log("backend", "error", "handler", "Invalid or missing URL");
      return res.status(400).json({ error: 'Invalid or missing URL' });
    }

    let finalCode = shortcode;

    if (shortcode) {
      const exists = await Url.findOne({ shortcode });
      const isValid = /^[a-zA-Z0-9]+$/.test(shortcode);
      if (exists || !isValid) {
        finalCode = await generateUniqueShortcode();
        await log("backend", "info", "handler", "Custom shortcode rejected, generated new code");
      }
    } else {
      finalCode = await generateUniqueShortcode();
      await log("backend", "info", "handler", "Shortcode autogenerated");
    }

    const now = new Date();
    const expiresAt = new Date(now.getTime() + (validity || 30) * 60000);

    const newUrl = await Url.create({
      originalUrl: url,
      shortcode: finalCode,
      createdAt: now,
      expiresAt,
    });

    await log("backend", "info", "db", `Short URL created: ${finalCode}`);

    return res.status(201).json({
      shortLink: `${process.env.BASE_URL}/${finalCode}`,
      expiry: expiresAt.toISOString(),
    });
  } catch (err) {
    await log("backend", "fatal", "handler", `createShortUrl failed: ${err.message}`);
    return res.status(500).json({ error: 'Server error' });
  }
};

exports.redirectToOriginalUrl = async (req, res) => {
  try {
    const { shortcode } = req.params;
    const found = await Url.findOne({ shortcode });

    if (!found) {
      await log("backend", "error", "handler", `Shortcode not found: ${shortcode}`);
      return res.status(404).json({ error: 'Shortcode not found' });
    }

    if (new Date() > found.expiresAt) {
      await log("backend", "warn", "handler", `Expired URL access attempt: ${shortcode}`);
      return res.status(410).json({ error: 'Link expired' });
    }

    const referrer = req.get('Referrer') || 'Direct';
    const location = req.get('X-Forwarded-For') || req.ip;

    found.clicks.push({
      timestamp: new Date(),
      source: referrer,
      location,
    });

    await found.save();

    await log("backend", "info", "db", `Redirected to original URL for: ${shortcode}`);

    return res.redirect(found.originalUrl);
  } catch (err) {
    await log("backend", "fatal", "handler", `redirectToOriginalUrl failed: ${err.message}`);
    return res.status(500).json({ error: 'Server error' });
  }
};

exports.getUrlStats = async (req, res) => {
  try {
    const { shortcode } = req.params;
    const found = await Url.findOne({ shortcode });

    if (!found) {
      await log("backend", "error", "handler", `Stats not found for shortcode: ${shortcode}`);
      return res.status(404).json({ error: 'Shortcode not found' });
    }

    await log("backend", "info", "db", `Stats fetched for: ${shortcode}`);

    return res.status(200).json({
      originalUrl: found.originalUrl,
      createdAt: found.createdAt,
      expiresAt: found.expiresAt,
      totalClicks: found.clicks.length,
      clicks: found.clicks,
    });
  } catch (err) {
    await log("backend", "fatal", "handler", `getUrlStats failed: ${err.message}`);
    return res.status(500).json({ error: 'Server error' });
  }
};
